ldscData2 = ldscData2[order(ldscData2$P),]
# Load MAGMA
magmaData = read.table("MAGMA/CLOZUK_PGC2noclo.METAL.assoc.dosage.fix.level1.10UP.1.5DOWN.AllanMTG_VFiltRPKM_mean_Merged.gcov.out",stringsAsFactors = FALSE)
colnames(magmaData) = magmaData[1,]
magmaData = magmaData[-1,]
magmaData2 = magmaData[,c("COVAR","P")]
magmaData2$Method = "MAGMA"
colnames(magmaData2) = c("Celltype","P","Method")
# Combine and plot
combinedRes = rbind(ldscData2,magmaData2)
combinedRes$P = as.numeric(combinedRes$P)
combinedRes$Q = p.adjust(combinedRes$P,method="bonferroni")
combinedRes = combinedRes[order(combinedRes$P,decreasing=FALSE),]
combinedRes$Celltype = factor(combinedRes$Celltype,rev(unique(combinedRes$Celltype)))
#combinedRes$CT = gsub("cl\\w*_\\w*_(.*)_L.*","\\1",combinedRes$Celltype)
save(combinedRes,file="/Users/natske/Desktop/Trygve/combinedRes_VFiltRPKM.Rda")
library(ggplot2)
library(cowplot)
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()
# Load MAGMA
magmaData = read.table("MAGMA/CLOZUK_PGC2noclo.METAL.assoc.dosage.fix.level3.10UP.1.5DOWN.AllanMTG_VFiltRPKM_mean_Merged.gcov.out",stringsAsFactors = FALSE)
colnames(magmaData) = magmaData[1,]
magmaData = magmaData[-1,]
magmaData2 = magmaData[,c("COVAR","P")]
magmaData2$Method = "MAGMA"
colnames(magmaData2) = c("Celltype","P","Method")
# Combine and plot
combinedRes = rbind(ldscData2,magmaData2)
combinedRes$P = as.numeric(combinedRes$P)
combinedRes$Q = p.adjust(combinedRes$P,method="bonferroni")
combinedRes = combinedRes[order(combinedRes$P,decreasing=FALSE),]
combinedRes$Celltype = factor(combinedRes$Celltype,rev(unique(combinedRes$Celltype)))
#combinedRes$CT = gsub("cl\\w*_\\w*_(.*)_L.*","\\1",combinedRes$Celltype)
save(combinedRes,file="/Users/natske/Desktop/Trygve/combinedRes_VFiltRPKM.Rda")
library(ggplot2)
library(cowplot)
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()
magmaData2
magmaData2$Celltype=gsub("\\.","",magmaData2$Celltype)
colnames(magmaData2) = c("Celltype","P","Method")
# Combine and plot
combinedRes = rbind(ldscData2,magmaData2)
combinedRes$P = as.numeric(combinedRes$P)
combinedRes$Q = p.adjust(combinedRes$P,method="bonferroni")
combinedRes = combinedRes[order(combinedRes$P,decreasing=FALSE),]
combinedRes$Celltype = factor(combinedRes$Celltype,rev(unique(combinedRes$Celltype)))
#combinedRes$CT = gsub("cl\\w*_\\w*_(.*)_L.*","\\1",combinedRes$Celltype)
save(combinedRes,file="/Users/natske/Desktop/Trygve/combinedRes_VFiltRPKM.Rda")
library(ggplot2)
library(cowplot)
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_vline(aes(xintercept=0.05/dim(combinedRes)[1]))
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/dim(combinedRes)[1]))
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1])/2))
(dim(combinedRes)[1])/2)
(dim(combinedRes)[1])/2
(dim(combinedRes)[1])
0.05/(dim(combinedRes)[1])/2)
0.05/(dim(combinedRes)[1])/2
0.05/(dim(combinedRes)[1]/2)
ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2))
)
ldscData2
# Load LDSC
#ldscData = read.csv("LDSC/LDSC_GWAS_Results Res16 CLOZUKonly.csv",stringsAsFactors = FALSE)
load("LDSC/LDSC_GWAS_Results_stepSize_0.1.Rda")
ldscData = all_gwas
ldscData = ldscData[ldscData$file=="celltype_data_AllanMTG_Merged_VFiltRPKM_Level3",]
ldscData = ldscData[ldscData$percentile=="1",]
ldscData[1:3,]
ldscData$gwas
table(ldscData$gwas)
#ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2))
ggplot(combinedRes)+geom_bar(aes(y=P,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2))
dev.off()
)
#ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2))
ggplot(combinedRes)+geom_bar(aes(y=P,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2)))
#ggplot(combinedRes)+geom_bar(aes(y=Q,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1]/2))
ggplot(combinedRes)+geom_bar(aes(y=P,x=Celltype,fill=Method),stat="identity",position="dodge")+scale_y_log10()+coord_flip()+geom_hline(aes(yintercept=0.05/(dim(combinedRes)[1])))
load("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/CellTypeData_AllanMTG_Merged_VFilt.rda")
rownames(sct_data[[lv]]$mean_exp)
hitGenes
hits
hitGenes
hitGenes
devtools::document()
library(devtools)
devtools::document()
install.packages("devtools")
devtools::document()
library(EWCE)
devtools::document()
devtools::document()
# GET MATRIX WITH 10000 RANDOMLY SAMPLED GENES FROM THE SAME QUADRANT AS THE LIST GENE
list_network = matrix("",nrow=numBOOT,ncol=length(hitGenes_NEW))
count=0
for(gene in hitGenes_NEW){
count=count+1
if(sctSpecies=="mouse"){
this_gene_quad = data_byGene2[data_byGene2$MGI.symbol==gene,"uniq_quad"][1]
}else if(sctSpecies=="human"){
this_gene_quad = data_byGene2[data_byGene2$HGNC.symbol==gene,"uniq_quad"][1]
}
candidates = as.vector(unlist(quad_genes[this_gene_quad]))
list_network[,count] = sample(candidates,numBOOT,replace=TRUE)
}
print("CONTROLLED BOOTSTRAPPING NETWORK GENERATED")
hitGenes_NEW
hitGenes_NEW
library(EWCE)
library(One2One)
#load("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/CellTypeData_AllanMTG_Merged_VFiltRPKM.rda")
load("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/CellTypeData_AllanMTG_IntronsOnly_VFiltRPKM.rda")
#load("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/CellTypeData_AllanMTG_IntronsOnly_VFilt.rda")
library(biomaRt)
listMarts(host="www.ensembl.org")
human <- useMart(host="www.ensembl.org", "ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
ensembl_transript_lengths = getBM(attributes=c("transcript_length","cds_length","ensembl_gene_id"), mart= human)
ensembl_hgnc = getBM(attributes=c("hgnc_symbol","ensembl_gene_id","transcript_biotype"), mart= human)
ensembl_hgnc = ensembl_hgnc[ensembl_hgnc$hgnc_symbol %in% rownames(ctd[[1]]$mean_exp),]
protein_coding = ensembl_hgnc[ensembl_hgnc$transcript_biotype=="protein_coding",]
protein_coding_hgnc = unique(protein_coding$hgnc_symbol)
#maxExp = apply(ctd[[3]]$mean_exp,1,max)
#expGenes = names(maxExp[maxExp>quantile(apply(ctd[[3]]$mean_exp,1,max),prob=0.2)])
#ctd[[3]]$mean_exp = ctd[[3]]$mean_exp[expGenes,]
#ctd[[3]]$specificity = ctd[[3]]$specificity[expGenes,]
#ctd[[3]]$specificity = ctd[[3]]$median_specificity
file="severe intellectual disability"
hm_genes = read.csv(sprintf("/Users/natske/Google Drive/DiseaseLists/%s.txt",file),stringsAsFactors = FALSE)[-1,1]
expressedGenes=protein_coding_hgnc #unique(rownames(ctd[[3]]$specificity))
if(file=="Rbfox_binding"){
hm_genes = unique(One2One::ortholog_data_Mouse_Human$orthologs_one2one[One2One::ortholog_data_Mouse_Human$orthologs_one2one$mouse.symbol %in% hm_genes,]$human.symbol)
bg_human = One2One::ortholog_data_Mouse_Human$orthologs_one2one$human.symbol
bg_human = bg_human[bg_human %in% expressedGenes]
}else{
bg_human=expressedGenes # mouse_to_human_homologs$HGNC.symbol
#bg_human = One2One::ortholog_data_Mouse_Human$orthologs_one2one$human.symbol
#bg_human = bg_human[bg_human %in% expressedGenes]
}
#data("mouse_to_human_homologs")
annotLevel=3
if(annotLevel==1){widthVal=9}
if(annotLevel==2){widthVal=20}
if(annotLevel==3){widthVal=9}
full_results = EWCE::bootstrap.enrichment.test(sct_data=ctd,hits=hm_genes[hm_genes %in% bg_human],bg=bg_human,reps=10000,annotLevel=3, sctSpecies = "human",genelistSpecies="human",geneSizeControl=TRUE)
sct_data=ctd;hits=hm_genes[hm_genes %in% bg_human];bg=bg_human;reps=10000;annotLevel=3; sctSpecies = "human";genelistSpecies="human";geneSizeControl=TRUE;controlledCT=NULL
checkedLists = check.ewce.genelist.inputs(sct_data,hits,bg,genelistSpecies,sctSpecies,geneSizeControl)
hits=checkedLists$hits
bg=checkedLists$bg
# Check an SCT dataset was provided
if(unique(is.na(sct_data))){stop("ERROR: must provide valid single cell dataset")}
# Check if controlling for another celltype
if(!is.null(controlledCT)){
if(!controlledCT %in% colnames(sct_data[[1]]$specificity)){
stop("ERROR: invalid celltype name passed in controlledCT. This argument is optional. Leave empty if you do not wish to control for a celltypes expression.")
}
}
# IF USING GENESIZE AND GC-CONTENT MATCHING, THEN GENERATE THE SAMPLE LISTS
if(geneSizeControl==TRUE){
#control_related = prepare.genesize.control.network(humanGenelist=human.hits,human.bg=human.bg,mouseGenes=unique(c(mouse.hits,mouse.bg)),numBOOT=reps)
control_related = prepare.genesize.control.network(hits=hits,bg=bg,numBOOT=reps,sctSpecies="mouse")
control_network = control_related[["list_network"]]
hitGenes = control_related[["hitGenes"]]
nonHits  = unique(control_related[["list_network"]]) #mouse.bg
combinedGenes = c(hitGenes,nonHits) #c(mouse.hits,mouse.bg)
if(length(hitGenes)!=dim(control_network)[2]){
stop("ERROR! AFTER CALCULATING BOOTSTRAPPING NETWORK WITH LENGTH + GC CONTROLS, size of list_network is not same length as hitGenes")
}
}else{
hitGenes = hits #mouse.hits
nonHits  = bg #mouse.bg
combinedGenes = c(hits,bg) #c(mouse.hits,mouse.bg)
}
#' Prepare genesize control network
#'
#' \code{prepare.genesize.control.network} takes a genelist and finds semi-randomly selected gene lists which are matched for gene length and GC content
#'
#' @param hits Array of MGI gene symbols containing the target gene list. Must be HGNC symbols.
#' @param bg Array of MGI gene symbols containing the background gene list (including hit genes). Must be HGNC symbols.
#' @param numBOOT Number of gene lists to sample
#' @param sctSpecies  Either 'mouse' or 'human' depending on whether MGI or HGNC symbols are used for the single cell dataset
#' @return A list containing three data frames:
#' \itemize{
#'   \item \code{hitGenes}: Array of HGNC symbols containing the hit genes. May be slightly reduced if gene length / GC content could not be found for all genes.
#'   \item \code{list_network}: The control gene lists as a data frame of HGNC symbols
#' }
#' @examples
#' # Called by bootstrap.enrichment.t
#prepare.genesize.control.network <- function(humanGenelist,human.bg,numBOOT = 10000){
#' @import stats
#' @import utils
#' @import biomaRt
prepare.genesize.control.network <- function(hits,bg,numBOOT = 10000,sctSpecies){
### PREPARE TO QUERY BIOMART
combined_human_genes = unique(c(hits,bg))
#library("biomaRt")
#listMarts(host="www.ensembl.org")
#human <- useMart(host="www.ensembl.org", "ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
### FIRST GET ALL ENSEMBL GENE IDS FOR THE HUMAN GENES
#hum_ens = getBM(attributes=c("hgnc_symbol","ensembl_gene_id"), filters="hgnc_symbol", values= combined_human_genes, mart= human)
data(all_hgnc_wtEnsembl)
hum_ens = all_hgnc_wtEnsembl[all_hgnc_wtEnsembl$hgnc_symbol %in% combined_human_genes,]
# CHECK THE GENELISTS WERE HUMAN HGNC SYMBOLS
if(sum(hits %in% hum_ens$hgnc_symbol)==0){stop("ERROR: No hits recognised as human HGNC symbols. Perhaps the gene list was wrongly provided as MGI symbols? prepare.genesize.control.network only accepts HGNC symbols.")}
if(sum(bg %in% hum_ens$hgnc_symbol)==0){stop("ERROR: No bg genes recognised as human HGNC symbols. Perhaps the gene list was wrongly provided as MGI symbols? prepare.genesize.control.network only accepts HGNC symbols.")}
### GET THE TRANSCRIPT LENGTHS AND GC CONTENT FROM BIOMART
#all_lengths = getBM(attributes=c("transcript_length","percentage_gene_gc_content","ensembl_gene_id"), filters="ensembl_gene_id", values= hum_ens$ensembl_gene_id, mart= human)
data(ensembl_transcript_lengths_GCcontent)
all_lengths = ensembl_transcript_lengths_GCcontent[ensembl_transcript_lengths_GCcontent$ensembl_gene_id %in% hum_ens$ensembl_gene_id,]
all_lengths = all_lengths[!is.na(all_lengths$transcript_length),]
all_lens = merge(all_lengths,hum_ens,by="ensembl_gene_id")
# TAKE THE MEAN TRANSCRIPT LENGTH & GC-CONTENT FOR EACH GENE
transcript_lengths = aggregate(all_lens$transcript_length,by=list(all_lens$hgnc_symbol),FUN=mean)
percentage_gene_gc_content = aggregate(all_lens$percentage_gene_gc_content,by=list(all_lens$hgnc_symbol),FUN=mean)
data_byGene = cbind(transcript_lengths, percentage_gene_gc_content[,2])
colnames(data_byGene) = c("HGNC.symbol","transcript_lengths","percentage_gene_gc_content")
data_byGene = data_byGene[data_byGene$HGNC.symbol!="",]
if(sctSpecies=="mouse"){
### DROP ANY HUMAN GENES WITHOUT HOMOLOGOUS MOUSE GENES
mouse_to_human_homologs=NULL # <-- THIS LINE ONLY INCLUDED TO FOOL devtools::check()
data("mouse_to_human_homologs", envir = environment())
m2h = unique(mouse_to_human_homologs[,c("HGNC.symbol","MGI.symbol")])
data_byGene2 = data_byGene[data_byGene$HGNC.symbol %in% m2h$HGNC.symbol,]
### MERGE THE LENGTH/GC DATA WITH MOUSE ORTHOLOG DATA
data_byGene3 = merge(data_byGene2,m2h,by="HGNC.symbol")
data_byGene2 = data_byGene3
}else if(sctSpecies=="human"){
data_byGene2 = data_byGene3 = data_byGene
}
# GET QUANTILES FOR TRANSCRIPT LENGTH + GC CONTENT
tl_quants = quantile(data_byGene2$transcript_length, probs = seq(0.1, 1, 0.1))
gc_quants = quantile(data_byGene2$percentage_gene_gc_content, probs = seq(0.1, 1, 0.1))
# ASSIGN EACH GENE TO A QUANTILE QUADRANT
quadrant = matrix(0,nrow=dim(data_byGene2)[1],ncol=2)
colnames(quadrant) = c("TL","GC")
for(i in 1:dim(data_byGene2)[1]){
quadrant[i,1] = which(data_byGene2[i,2]<tl_quants)[1]
quadrant[i,2] = which(data_byGene2[i,3]<gc_quants)[1]
}
data_byGene2$uniq_quad = sprintf("%s_%s",quadrant[,1],quadrant[,2])
uq = data_byGene2$uniq_quad
data_byGene2 = data_byGene2[uq!="2_NA" & uq!="NA_2" & uq!="3_NA",]
### FOR EACH 'DISEASE LIST' GENERATE A SET OF 10000 QUADRANT MATCHED GENE LISTS
# - Get new set of mouse hitGenes, containing only those within data_byGene2
if(sctSpecies=="mouse"){
hitGenes_NEW = data_byGene2[data_byGene2$HGNC.symbol %in% hits,"MGI.symbol"]
}else if(sctSpecies=="human"){
hitGenes_NEW = data_byGene2[data_byGene2$HGNC.symbol %in% hits,"HGNC.symbol"]
}
list_genes1d = hits[hits %in% data_byGene$HGNC.symbol]
# GET ALL MOUSE GENES IN EACH QUADRANT
quad_genes = list()
for(uq in unique(data_byGene2$uniq_quad)){
if(sctSpecies=="mouse"){
quad_genes[[uq]] = unique(data_byGene2[data_byGene2$uniq_quad==uq,"MGI.symbol"])
}else if(sctSpecies=="human"){
quad_genes[[uq]] = unique(data_byGene2[data_byGene2$uniq_quad==uq,"HGNC.symbol"])
}
}
# GET MATRIX WITH 10000 RANDOMLY SAMPLED GENES FROM THE SAME QUADRANT AS THE LIST GENE
list_network = matrix("",nrow=numBOOT,ncol=length(hitGenes_NEW))
count=0
for(gene in hitGenes_NEW){
count=count+1
if(sctSpecies=="mouse"){
this_gene_quad = data_byGene2[data_byGene2$MGI.symbol==gene,"uniq_quad"][1]
}else if(sctSpecies=="human"){
this_gene_quad = data_byGene2[data_byGene2$HGNC.symbol==gene,"uniq_quad"][1]
}
candidates = as.vector(unlist(quad_genes[this_gene_quad]))
list_network[,count] = sample(candidates,numBOOT,replace=TRUE)
}
print("CONTROLLED BOOTSTRAPPING NETWORK GENERATED")
return(list(hitGenes=hitGenes_NEW,list_network=list_network))
}
checkedLists = check.ewce.genelist.inputs(sct_data,hits,bg,genelistSpecies,sctSpecies,geneSizeControl)
hits=checkedLists$hits
bg=checkedLists$bg
# Check an SCT dataset was provided
if(unique(is.na(sct_data))){stop("ERROR: must provide valid single cell dataset")}
# Check if controlling for another celltype
if(!is.null(controlledCT)){
if(!controlledCT %in% colnames(sct_data[[1]]$specificity)){
stop("ERROR: invalid celltype name passed in controlledCT. This argument is optional. Leave empty if you do not wish to control for a celltypes expression.")
}
}
# IF USING GENESIZE AND GC-CONTENT MATCHING, THEN GENERATE THE SAMPLE LISTS
if(geneSizeControl==TRUE){
#control_related = prepare.genesize.control.network(humanGenelist=human.hits,human.bg=human.bg,mouseGenes=unique(c(mouse.hits,mouse.bg)),numBOOT=reps)
control_related = prepare.genesize.control.network(hits=hits,bg=bg,numBOOT=reps,sctSpecies="mouse")
control_network = control_related[["list_network"]]
hitGenes = control_related[["hitGenes"]]
nonHits  = unique(control_related[["list_network"]]) #mouse.bg
combinedGenes = c(hitGenes,nonHits) #c(mouse.hits,mouse.bg)
if(length(hitGenes)!=dim(control_network)[2]){
stop("ERROR! AFTER CALCULATING BOOTSTRAPPING NETWORK WITH LENGTH + GC CONTROLS, size of list_network is not same length as hitGenes")
}
}else{
hitGenes = hits #mouse.hits
nonHits  = bg #mouse.bg
combinedGenes = c(hits,bg) #c(mouse.hits,mouse.bg)
}
hitGenes
prepare.genesize.control.network
library(EWCE)
# IF USING GENESIZE AND GC-CONTENT MATCHING, THEN GENERATE THE SAMPLE LISTS
if(geneSizeControl==TRUE){
#control_related = prepare.genesize.control.network(humanGenelist=human.hits,human.bg=human.bg,mouseGenes=unique(c(mouse.hits,mouse.bg)),numBOOT=reps)
control_related = prepare.genesize.control.network(hits=hits,bg=bg,numBOOT=reps,sctSpecies=sctSpecies)
control_network = control_related[["list_network"]]
hitGenes = control_related[["hitGenes"]]
nonHits  = unique(control_related[["list_network"]]) #mouse.bg
combinedGenes = c(hitGenes,nonHits) #c(mouse.hits,mouse.bg)
if(length(hitGenes)!=dim(control_network)[2]){
stop("ERROR! AFTER CALCULATING BOOTSTRAPPING NETWORK WITH LENGTH + GC CONTROLS, size of list_network is not same length as hitGenes")
}
}else{
hitGenes = hits #mouse.hits
nonHits  = bg #mouse.bg
combinedGenes = c(hits,bg) #c(mouse.hits,mouse.bg)
}
hitGenes
full_results = EWCE::bootstrap.enrichment.test(sct_data=ctd,hits=hm_genes[hm_genes %in% bg_human],bg=bg_human,reps=10000,annotLevel=3, sctSpecies = "human",genelistSpecies="human",geneSizeControl=TRUE)
full_results$results
file="EXAC_LossOfFunctionIntolerant"
hm_genes = read.csv(sprintf("/Users/natske/Google Drive/DiseaseLists/%s.txt",file),stringsAsFactors = FALSE)[-1,1]
expressedGenes=protein_coding_hgnc #unique(rownames(ctd[[3]]$specificity))
if(file=="Rbfox_binding"){
hm_genes = unique(One2One::ortholog_data_Mouse_Human$orthologs_one2one[One2One::ortholog_data_Mouse_Human$orthologs_one2one$mouse.symbol %in% hm_genes,]$human.symbol)
bg_human = One2One::ortholog_data_Mouse_Human$orthologs_one2one$human.symbol
bg_human = bg_human[bg_human %in% expressedGenes]
}else{
bg_human=expressedGenes # mouse_to_human_homologs$HGNC.symbol
#bg_human = One2One::ortholog_data_Mouse_Human$orthologs_one2one$human.symbol
#bg_human = bg_human[bg_human %in% expressedGenes]
}
#data("mouse_to_human_homologs")
annotLevel=3
if(annotLevel==1){widthVal=9}
if(annotLevel==2){widthVal=20}
if(annotLevel==3){widthVal=9}
full_results = EWCE::bootstrap.enrichment.test(sct_data=ctd,hits=hm_genes[hm_genes %in% bg_human],bg=bg_human,reps=10000,annotLevel=3, sctSpecies = "human",genelistSpecies="human",geneSizeControl=TRUE)
pdf(sprintf("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/EWCE_%s.pdf",file),width=9,height=6)
print(ewce.plot(full_results$results,mtc_method="BH"))
dev.off()
files=c("Rbfox_HGNC","severe intellectual disability","EXAC_LossOfFunctionIntolerant","Seizures_HPO_May2017","extTADA Epilepsy","extTADA DD","extTADA ID")
for(file in files){
hm_genes = read.csv(sprintf("/Users/natske/Google Drive/DiseaseLists/%s.txt",file),stringsAsFactors = FALSE)[-1,1]
expressedGenes=protein_coding_hgnc #unique(rownames(ctd[[3]]$specificity))
#if(file=="Rbfox_binding"){
#  hm_genes = unique(One2One::ortholog_data_Mouse_Human$orthologs_one2one[One2One::ortholog_data_Mouse_Human$orthologs_one2one$mouse.symbol %in% hm_genes,]$human.symbol)
#  bg_human = One2One::ortholog_data_Mouse_Human$orthologs_one2one$human.symbol
#  bg_human = bg_human[bg_human %in% expressedGenes]
#}else{
bg_human=expressedGenes # mouse_to_human_homologs$HGNC.symbol
#}
#data("mouse_to_human_homologs")
annotLevel=3
if(annotLevel==1){widthVal=9}
if(annotLevel==2){widthVal=20}
if(annotLevel==3){widthVal=9}
full_results = EWCE::bootstrap.enrichment.test(sct_data=ctd,hits=hm_genes[hm_genes %in% bg_human],bg=bg_human,reps=10000,annotLevel=3, sctSpecies = "human",genelistSpecies="human",geneSizeControl=TRUE)
pdf(sprintf("/Users/natske/Datasets that are too large to store elsewhere/Cell type dataset---MTG v2/EWCE_%s.pdf",file),width=9,height=6)
print(ewce.plot(full_results$results,mtc_method="BH"))
dev.off()
}
devtools::document()
library(EWCE)
"""
"""
future::availableCores()
message("+ Converting exp matrix into SummarizedExperiment")
?SingleCellExperiment
??SingleCellExperiment
BiocManager::install("SingleCellExperiment")
install.packages("HDF5Array")
BiocManager::install("HDF5Array")
BiocManager::install("TENxPBMCData")
?TENxPBMCData
# Example dataset
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
sce
# Example dataset
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
library(DelayedArray)
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
BiocManager::valid()
BiocManager::install(c(
"BMA", "broom", "DescTools", "fitdistrplus", "future", "ggrepel", "gh", "gplots", "here", "inline",
"leiden", "lme4", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "psych",
"RcppAnnoy", "RcppEigen", "rmarkdown", "sctransform", "segmented", "Seurat", "spatstat.data",
"testthat", "tinytex", "usethis", "vctrs"
), update = TRUE, ask = FALSE)
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
BiocManager::install("TENxPBMCData")
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
library(dplyr)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
detach("package:dplyr", unload = TRUE)
library(DelayedArray)
library(BiocParallel)
library(SingleCellExperiment)
# Example dataset
library(TENxPBMCData)
sce <- TENxPBMCData::TENxPBMCData(dataset = "pbmc4k")
sce <- TENxPBMCData::TENxPBMCData()
EWCE::cortex_mrna
exp <- EWCE::cortex_mrna
class(exp)
head(EWCE::cortex_mrna$annot)
exp <- EWCE::cortex_mrna$exp
colData <- EWCE::cortex_mrna$annot
rowData=NULL
# Enable parallelization of HDF5 functions
workers <- future::availableCores() - 2
DelayedArray::setAutoBPPARAM(MulticoreParam(workers))
DelayedArray:::set_verbose_block_processing(TRUE)
message("+ Converting exp matrix into SingleCellExperiment...")
sce <- SingleCellExperiment::SingleCellExperiment(
assays      = list(raw = DelayedArray::DelayedArray(exp)),
colData     = colData,
rowData     = rowData
)
sce
save_dir
save_dir <- "~/Desktop/cortex_mrna_h5"
save_dir <- "~/Desktop/cortex_mrna_HDF5Array"
HDF5Array::saveHDF5SummarizedExperiment(sce, save_dir, verbose=T)
parallel::detectCores()
future::availableCores()
data("cortex_mrna")
cortex_mrna$exp = cortex_mrna$exp[1:300,] # Use only a subset of genes to keep the example quick
exp2 = drop.uninformative.genes(exp=cortex_mrna$exp,level2annot=cortex_mrna$annot$level2class)
#' @param exp Expression matrix with gene names as rownames.
#' @param level2annot Array of cell types, with each sequentially corresponding a column in the expression matrix
#' @return exp Expression matrix with gene names as rownames.
#' @examples
#' data("cortex_mrna")
#' cortex_mrna$exp = cortex_mrna$exp[1:300,] # Use only a subset of genes to keep the example quick
#' exp2 = drop.uninformative.genes(exp=cortex_mrna$exp,level2annot=cortex_mrna$annot$level2class)
#' @export
#' @import limma
#' @import stats
drop.uninformative.genes <- function(exp,
level2annot,
as_DelayedArray=F,
colData=NULL,
rowData=NULL,
save_dir=NULL,
verbose=T){
if(as_DelayedArray==F){
#### Original method ####
# Best for smaller datasets that can fit into memory)
message("Processing in-memory....")
if(class(exp[1,1])=="character"){
exp = as.matrix(exp)
storage.mode(exp) <- "numeric"
}
level2annot = as.character(level2annot)
summed = apply(exp,1,sum)
exp = exp[summed!=0,]
mod  = model.matrix(~level2annot)
fit = lmFit(exp,mod)
eb = eBayes(fit)
pF = p.adjust(eb$F.p.value,method="BH")
exp = exp[pF<0.00001,]
return(exp)
} else {
#### DelayedArray method ####
# Best for large datasets that can't fit into memory.
message("Processing as DelayedArray....")
sce <- convert_to_SCE(exp=exp,
colData=colData,
rowData=rowData,
save_dir=save_dir,
verbose=verbose)
}
}
exp2 = drop.uninformative.genes(exp=cortex_mrna$exp,level2annot=cortex_mrna$annot$level2class)
library(EWCE
)
exp2 = drop.uninformative.genes(exp=cortex_mrna$exp,level2annot=cortex_mrna$annot$level2class)
??model.matrix
?storage.mode
level2annot=colData$level2class
level2annot
sce
verbose=T
?glm_gp
??glm_gp
BiocManager::install("glmGamPoi")
BiocManager::valid()
devtools::install_github("const-ae/glmGamPoi")
mod  = model.matrix(~level2annot)
mod
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
