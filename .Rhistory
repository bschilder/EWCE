# offset = 1,
verbose = verbose)
### Remove non-expressed genes ####
printer("+ Removing non-expressed genes...",v=verbose)
exp <- SummarizedExperiment::assay(sce)
summed <- DelayedArray::rowSums(exp)
# Subset the sce object
sce = sce[summed!=0,]
printer(paste(nrow(sce)-sum(summed==0),"/",nrow(sce),
"non-expressed genes dropped"), v=verbose)
printer(paste(nrow(sce)-sum(summed!=0),"/",nrow(sce),
"non-expressed genes dropped"), v=verbose)
exp <- SummarizedExperiment::assay(sce)
orths <- convert_orthologues(gene_df=exp,
gene_col="rownames",
input_species=input_species,
drop_nonhuman_genes=T,
one_to_one_only=T,
genes_as_rownames=T,
verbose=verbose)
sce <- sce[orths$Gene_orig,]
# Use variance of mean gene expression across cell types
# as a fast and simple way to select genes
sce <- DelayedArray_filter_variance_quantiles(sce = sce,
level2annot = level2annot,
n_quantiles = 10,
min_variance_decile = min_variance_decile,
verbose = verbose)
on_disk=F
level2_options <- as.factor(sce[[level2annot]])
mod_matrix  <- model.matrix(~level2_options)
fit <- glmGamPoi::glm_gp(sce,
design = mod_matrix,
# on_disk=F when testing on subsets of SCE
on_disk = on_disk,
# Offset necessary for sparse scRNAseq data?
# offset = 1,
verbose = verbose)
# Save fitted model as intermediate
sce_dir <- dirname(h5_path)
fit_path <- file.path(sce_dir,paste(basename(sce_dir),"glm_gp.RDS",sep="."))
messager("+ Saving intermediate file ==>",fit_path, v=verbose)
saveRDS(fit, fit_path)
fit
pseudobulk_by=level2annot
pval_adjust_method
pval_adjust_method="BH"
# Run DGE
# intercept <- colnames(fit$Beta)[1]
# normed <- (fit$Beta[,1] / sum(fit$Beta[,1]))
# normed_scaled <- scales::rescale(normed, to = c(0,1))
# fit$Beta <- cbind(fit$Beta, Intercept_normed=normed_scaled)
de_res <- glmGamPoi::test_de(fit,
# `pseudobulk_by` reduces false positives drastically
pseudobulk_by = pseudobulk_by,
contrast =`(Intercept)`,
pval_adjust_method = pval_adjust_method,
verbose = verbose)
# Run DGE
# intercept <- colnames(fit$Beta)[1]
# normed <- (fit$Beta[,1] / sum(fit$Beta[,1]))
# normed_scaled <- scales::rescale(normed, to = c(0,1))
# fit$Beta <- cbind(fit$Beta, Intercept_normed=normed_scaled)
de_res <- glmGamPoi::test_de(fit,
# `pseudobulk_by` reduces false positives drastically
# pseudobulk_by = pseudobulk_by,
contrast =`(Intercept)`,
pval_adjust_method = pval_adjust_method,
verbose = verbose)
de_res
# Add DGE results back into SCE object
sce_de <- SingleCellExperiment::SingleCellExperiment(
assays      = list(raw = assay(sce)),
colData     = sce@colData,
rowData     = de_res
)
sce_de
de_res
head(de_res)
sce_de <- HDF5Array::quickResaveHDF5SummarizedExperiment(sce_de, verbose=verbose)
# Only return deferentially expressed genes
sce_de <- subset(sce_de, adj_pval<adj_pval_thresh)
adj_pval_thresh=0.00001
# Only return deferentially expressed genes
sce_de <- subset(sce_de, adj_pval<adj_pval_thresh)
genes_dropped <- nrow(sce)-nrow(sce_de)
message("+ ",genes_dropped," / ",nrow(sce),
" (",round(genes_dropped/nrow(sce)*100, 1),"%)",
" genes dropped due to lack of differential expression ",
"between level2 annotations.")
messager <- function(..., v=T){if(v){message(paste(...))}}
printer <- function(..., v=T){if(v){print(paste(...))}}
#' loadRData
#'
#' Load processed data using a function that assigns it
#' to a specific variable (so you don't have to guess what the loaded variable name is).
#'
#' @export
loadRData <- function(fileName){
load(fileName)
get(ls()[ls() != "fileName"])
}
messager(genes_dropped," / ",nrow(sce),
" (",round(genes_dropped/nrow(sce)*100, 1),"%)",
" genes dropped due to lack of differential expression ",
"between level2 annotations.", v=verbose)
messager(genes_dropped,"/",nrow(sce),
"(",round(genes_dropped/nrow(sce)*100, 1),"%)",
"genes dropped due to lack of differential expression",
"between level2 annotations.", v=verbose)
messager(genes_dropped,"/",nrow(sce),
"(",round(genes_dropped/nrow(sce)*100, 1),"%)",
"genes dropped @ DGE adj_pval_thresh <",adj_pval_thresh, v=verbose)
messager(genes_dropped,"/",nrow(sce),
"(",round(genes_dropped/nrow(sce)*100, 1),"%)",
"genes dropped @ DGE adj_pval_thresh <",adj_pval_thresh, v=verbose)
library(EWCE)
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
library(EWCE)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
devtools::document()
install.packages("shiny")
devtools::document()
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
sce.limma <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="limma",
return_sce=T)
sce.orths_limma <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="limma",
return_sce=T,
drop_nonhuman_genes = T,
input_species = "mouse")
sce.deseq <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="DESeq2",
return_sce=T,
input_species="mouse",
drop_nonhuman_genes=T,
min_variance_decile=.9)
?DESeq
library(EWCE)
sce.deseq <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="DESeq2",
return_sce=T,
input_species="mouse",
drop_nonhuman_genes=T,
min_variance_decile=.9)
sce.deseq
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
sce <- HDF5Array::quickResaveHDF5SummarizedExperiment(sce, verbose = verbose)
verbose=T
sce <- HDF5Array::quickResaveHDF5SummarizedExperiment(sce, verbose = verbose)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
from_disk=F)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
on_disk=T,
sce_save_dir=here::here("~/Desktop/sce_examples"))
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
on_disk=T,
sce_save_dir=here::here("~/Desktop/sce_examples"))
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=F)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna,
sce_save_dir = here::here("~/Desktop/sce_examples"),
replace_HDF5 = T)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
data(cortex_mrna)
sce <- ingest_data(obj = cortex_mrna)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce <- ingest_data(obj = cortex_mrna)
sce.glmgp <- EWCE::drop.uninformative.genes(sce,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
base::closeAllConnections()
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
library(EWCE)
data(cortex_mrna)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce <- HDF5Array::quickResaveHDF5SummarizedExperiment(sce, verbose = verbose)
sce_save_dir=here::here("~/Desktop/sce_examples"),
library(EWCE)
data(cortex_mrna)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
library(EWCE)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=T)
sce.glmgp <- EWCE::drop.uninformative.genes(cortex_mrna,
level2annot="level2class",
DGE_method="glmGamPoi",
drop_nonhuman_genes=T,
input_species="mouse",
return_sce=T,
min_variance_decile=.9,
sce_save_dir=here::here("~/Desktop/sce_examples"),
on_disk=F)
devtools::document()
BiocManager::install('grimbough/biomaRt', ref = '3_12_testing')
BiocManager::install('grimbough/biomaRt', ref = '3_12_testing')
install.packages(“languageserver”)
install.packages("languageserver"")
install.packages("languageserver")
remotes::install_github("mojaveazure/seurat-disk@95d27f636e")
if (!requireNamespace("BiocManager", quietly=TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("zellkonverter")
if (!requireNamespace("BiocManager", quietly=TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("zellkonverter")
devtools::install_github("theislab/zellkonverter")
if (!requireNamespace("BiocManager", quietly=TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("basilisk")
R.version
BiocManager::install()
BiocVersion
BiocManager::version()
BiocManager::install(version = "3.12")
BiocManager::install(version = "3.11")
135/768
381/25
241/184
25*15
381+25
381+25/25
(381+25)/25
(241+184)/184
241+184
packageVersion("HDF5Array")
version
# IMPORTANT!: set as.sparse=T if you have the latest version of HDF5Array (1.8.11)
pkg_ver <- packageVersion("HDF5Array")
pkg_ver
as.numeric(pkg_ver)
strsplit(pkg_ver, "[.]")
strsplit( "[.]", pkg_ver)
strsplit( ".", pkg_ver)
pkg_ver
strsplit(pkg_ver,". ", fixed = T)
pkg_ver
class(pkg_ver)
strsplit(as.character(pkg_ver),".", fixed = T)
pkg_ver_split <- strsplit(as.character(pkg_ver),".", fixed = T)
pkg_ver_split
pkg_ver_split <- strsplit(as.character(pkg_ver),".", fixed = T)[[1]]
paste(pkg_ver_split[1], pkg_ver_split[2])
paste(pkg_ver_split[1], pkg_ver_split[2], sep=".")
as.numeric(paste(pkg_ver_split[1], pkg_ver_split[2], sep="."))
pkg_V <- as.numeric(paste(pkg_ver_split[1], pkg_ver_split[2], sep="."))
pkg_V<1.8
# When .h5 is a file, not a folder
obj <- "/Volumes/bms20/projects/neurogenomics-lab/live/GitRepos/model_celltype_conservation/raw_data/scRNAseq/LaManno2020/LaManno2020_sparse.h5"
object <- rhdf5::h5read(file =obj, name = "LaManno2020")
object <- rhdf5::h5read(file =obj)
object <- rhdf5::h5read(file =obj, name = "")
object <- anndata::read_hdf(obj)
object <- anndata::read_hdf(obj, key = "")
rhdf5::H5Gget_info(obj)
rhdf5::H5Iget_name(obj)
h5_con <- rhdf5::H5open(obj)
object <- anndata::read_hdf(obj, key = "")
object <- anndata::read_hdf(obj)
?read_hdf
rhdf5::
h5_con <- rhdf5::H5Aopen(obj)
rhdf5::
h5_con <- rhdf5::H5Aread(obj)
rhdf5::
h5_con <- rhdf5::H5read(obj)
rhdf5::
h5_con <- rhdf5::H5Dopen(obj)
rhdf5::
h5_con <- rhdf5::H5open(obj)
rhdf5::
h5_con <- obj$H5open()
rhdf5::
h5_con <- rhdf5::H5Aopen(obj)
h5_con <- HDF5Array::h5mread(obj)
h5_con <- HDF5Array::h5mread(obj, name="exprs")
rhdf5::h5readAttributes(obj,"A")
rhdf5::h5readAttributes(obj)
rhdf5::h5ls(obj)
h5_contents <- rhdf5::h5ls(obj)
head(h5_contents)
object <- rhdf5::h5read(file =obj, name = "data")
h5_contents <- rhdf5::h5ls(obj, datasetinfo=F)
h5_contents
object <- anndata::read_hdf(obj, key = "data")
object <- anndata::read(obj)
object <- anndata::read(obj, key = "exprs")
object <- anndata::read_hdf(obj, key = "exprs")
head(h5_contents)
unique(h5_contents$name)
unique(h5_contents$group)
object <- anndata::read_hdf(obj, key = "/")
obj
rhdf5::h5const()
rhdf5::h5const(obj)
rhdf5::h5closeAll()
object <- anndata::read_hdf(obj, key = "/")
object <- rhdf5::h5read(file =obj, name = "/")
object
dim(object)
length(object)
names(object)
# When .h5 is a file, not a folder
# obj <- "/Volumes/bms20/projects/neurogenomics-lab/live/GitRepos/model_celltype_conservation/raw_data/scRNAseq/LaManno2020/LaManno2020_sparse.h5"
rhdf5::h5closeAll()
?storage.mode
