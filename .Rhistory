sce <- HDF5Array::saveHDF5SummarizedExperiment(sce, dir = "~/Desktop/pbmc_small_h5", replace=T)
## Read in the sce object directly
sce <- ingest_data(obj=sce)
## Read it from disk
sce <- ingest_data(obj="~/Desktop/pbmc_small_h5")
#### Ingest AnnData ####
library(anndata)
## Can point to wheree anndata is installed (or should be installed)
## Can also just run anndata::install_anndata() and will install via miniconda
conda_dir <- dirname(dirname(reticulate::conda_list()[1,]$python))
reticulate::use_condaenv(condaenv = conda_dir)
reticulate::conda_install(conda = conda_dir, packages = "loompy", pip = T)
anndata::install_anndata(method = "conda", conda=conda_dir)
# Convert Seurat object to AnnData for example
adata <- anndata::AnnData(X = t(GetAssay(pbmc_small)@counts), obs = pbmc_small@meta.data, var = GetAssay(pbmc_small)@meta.features )
# Convert Seurat object to AnnData for example
adata <- anndata::AnnData(X = t(GetAssay(pbmc_small)@counts), obs = pbmc_small@meta.data, var = GetAssay(pbmc_small)@meta.features )
## In memory
sce <- ingest_data(obj=adata)
## On disk
adata$write_h5ad(filename = "~/Desktop/pbmc_small.h5ad")
library(SeuratDisk)
sce <- ingest_data(obj="~/Desktop/pbmc_small.h5Seurat")
#### Ingest loom (from loomR) ####
library(loomR)
loomR::create(data=adata, filename = "~/Desktop/pbmc_small.loom")
loomR::create(data=adata, filename = "~/Desktop/pbmc_small.loom", overwrite = T)
sce <- ingest_data(obj="~/Desktop/pbmc_small.loom")
sce$close()
loom <- loomR::create(data=adata, filename = "~/Desktop/pbmc_small.loom", overwrite = T)
loom <- loomR::create(data=adata, filename = "~/Desktop/pbmc_small.loom", overwrite = T)
loom <- loomR::create(data=adata, filename = "~/Desktop/pbmc_small.loom", overwrite = T)
sce <- ingest_data(obj="~/Desktop/pbmc_small.loom")
loom
sce <- ingest_data(obj=loom)
sce
sce <- ingest_data(obj="~/Desktop/pbmc_small.loom")
read_scRNAseq_data <- function(obj,
filetype="guess",
custom_reader=NULL,
verbose=T,
...){
if(!is.null(custom_reader)){
messager("+ Reading in with custom_reader function...")
object <- custom_reader(obj, ...)
return(object)
}
if(class(obj)[1]=="character"){
messager("+ Reading from disk...")
#### Generic RDS ####
if(endsWith(tolower(obj), suffix=".rds") | tolower(filetype)=="rds"){
messager("+ Reading in .rds file of unknown type...")
object <- readRDS(obj, ...)
return(object)
}
#### Generic RDS ####
if(endsWith(tolower(obj), suffix=".rda") | tolower(filetype)=="rda"){
messager("+ Reading in .rda file of unknown type...")
object <- loadRData(obj)
return(object)
}
#### .mtx folder ####
if((endsWith(tolower(obj), suffix=".mtx") & dir.exists(obj)) | tolower(filetype)=="mtx_dir"){
messager("+ Matrix folder format (.mtx) detected. Importing as Seurat object...")
object <- Seurat::CreateSeuratObject(counts = Seurat::Read10X(data.dir=obj, ...))
return(object)
}
#### .mtx matrix ####
if((endsWith(tolower(obj), suffix=".mtx") & (!dir.exists(obj)) ) | tolower(filetype)=="mtx"){
messager("+ Expression matrix (.mtx) detected. Importing as sparse dgCMatrix...",v=verbose)
object <- data.table::fread(obj, stringsAsFactors = F,
data.table = F)
object <- object %>% tibble::column_to_rownames(colnames(object)[1]) %>%
as.matrix() %>% Matrix::Matrix(sparse=T)
return(object)
}
#### .csv/.tsv matrix ####
if((any(endsWith(tolower(obj), suffix=c(".csv",".tsv",".csv.gz",".tsv.gz")))) | tolower(filetype) %in% c("csv","tsv")){
messager("+ Expression matrix (.csv|.tsv) detected. Importing as sparse dgCMatrix...",v=verbose)
object <- data.table::fread(obj, stringsAsFactors = F,
data.table = F)
object <- object %>% tibble::column_to_rownames(colnames(object)[1]) %>%
as.matrix() %>% Matrix::Matrix(sparse=T)
return(object)
}
#### AnnData ####
if((endsWith(tolower(obj), suffix=".h5ad")) | tolower(filetype)=="h5ad"){
messager("+ AnnData format (.h5ad) detected. Importing as AnnData object...",v=verbose)
#### anndata method
# object <- anndata::read_h5ad(filename = obj)
#### sceasy method
# object <- sceasy::convertFormat(obj, from="anndata", to="sce")
#### Seurat method
object <- Seurat::ReadH5AD(obj, ...)
return(object)
}
#### H5Seurat ####
if((endsWith(tolower(obj), suffix=".h5seurat")) | tolower(filetype)=="h5seurat"){
messager("+ h5Seurat format (.h5Seurat) detected. Importing as Seurat object...",v=verbose)
object <- SeuratDisk::LoadH5Seurat(file = obj)
return(object)
}
#### Loom ####
if((endsWith(tolower(obj), suffix=".loom")) | tolower(filetype)=="loom"){
messager("+ Loom format (.loom) detected. Importing as SingleCellLoomExperiment object...",v=verbose)
#### anndata method
# anndata::read_loom(filename=obj, validate=F, ...) ### Difficulties identifying right loompy location
#### loomR method
## skip.validate must =F, or else you won't be able to extract the matrix
# object <- loomR::connect(filename=obj, skip.validate = F)
#### sceasy method
object <- sceasy::convertFormat(obj, from="loom", to="sce")
# outFile='~/Desktop/filename.rds')
return(object)
}
#### HDF5Array SummarizedExperiment/SingleCellExperiment ####
if(dir.exists(obj) | tolower(filetype) %in% c("HDF5Array","SummarizedExperiment","SingleCellExperiment") ){
if(file.exists(file.path(obj,"assays.h5")) & file.exists(file.path(obj,"se.rds")) ){
messager("+ HDF5Array format (.h5) detected. Importing as SingleCellExperiment object...",v=verbose)
object <- HDF5Array::loadHDF5SummarizedExperiment(obj, ...)
return(object)
}
}
} else {
messager("+ Returning object directly...",v=verbose)
return(obj)
}
}
sce <- ingest_data(obj="~/Desktop/pbmc_small.loom")
obj="~/Desktop/pbmc_small.loom"
#### sceasy method
object <- sceasy::convertFormat(obj, from="loom", to="sce")
obj
#### sceasy method
obj_tmp <- loomR::connect(filename = obj, skip.validate = T)
object <- sceasy::convertFormat(obj_tmp, from="loom", to="sce", )
object <- sceasy::convertFormat(obj_tmp, from="loom", to="sce")
object <- sceasy::convertFormat(obj = obj_tmp, from="loom", to="sce",)
object <- sceasy::convertFormat(obj = obj_tmp, from="loom", to="sce")
gsub(".loom",".sce.rds",obj)
object <- sceasy::convertFormat(obj = obj_tmp, from="loom", to="sce",
outFile = gsub(".loom",".sce.rds",obj))
obj_tmp
object <- sceasy::convertFormat(obj_tmp, from="loom", to="sce",
outFile = gsub(".loom",".sce.rds",obj))
object <- sceasy::convertFormat(obj, from="loom", to="sce",
outFile = gsub(".loom",".sce.rds",obj))
object <- sceasy::convertFormat(obj, from="loom", to="sce")
rhdf5::H5Fopen(obj, flag = "H5F_ACC_RDONLY")
rhdf5::H5Fopen(obj,  )
rhdf5::H5Fopen(obj)
rhdf5::h5disableFileLocking()
object <- sceasy::convertFormat(obj, from="loom", to="sce")
object
read_scRNAseq_data <- function(obj,
filetype="guess",
custom_reader=NULL,
verbose=T,
...){
if(!is.null(custom_reader)){
messager("+ Reading in with custom_reader function...")
object <- custom_reader(obj, ...)
return(object)
}
if(class(obj)[1]=="character"){
messager("+ Reading from disk...")
#### Generic RDS ####
if(endsWith(tolower(obj), suffix=".rds") | tolower(filetype)=="rds"){
messager("+ Reading in .rds file of unknown type...")
object <- readRDS(obj, ...)
return(object)
}
#### Generic RDS ####
if(endsWith(tolower(obj), suffix=".rda") | tolower(filetype)=="rda"){
messager("+ Reading in .rda file of unknown type...")
object <- loadRData(obj)
return(object)
}
#### .mtx folder ####
if((endsWith(tolower(obj), suffix=".mtx") & dir.exists(obj)) | tolower(filetype)=="mtx_dir"){
messager("+ Matrix folder format (.mtx) detected. Importing as Seurat object...")
object <- Seurat::CreateSeuratObject(counts = Seurat::Read10X(data.dir=obj, ...))
return(object)
}
#### .mtx matrix ####
if((endsWith(tolower(obj), suffix=".mtx") & (!dir.exists(obj)) ) | tolower(filetype)=="mtx"){
messager("+ Expression matrix (.mtx) detected. Importing as sparse dgCMatrix...",v=verbose)
object <- data.table::fread(obj, stringsAsFactors = F,
data.table = F)
object <- object %>% tibble::column_to_rownames(colnames(object)[1]) %>%
as.matrix() %>% Matrix::Matrix(sparse=T)
return(object)
}
#### .csv/.tsv matrix ####
if((any(endsWith(tolower(obj), suffix=c(".csv",".tsv",".csv.gz",".tsv.gz")))) | tolower(filetype) %in% c("csv","tsv")){
messager("+ Expression matrix (.csv|.tsv) detected. Importing as sparse dgCMatrix...",v=verbose)
object <- data.table::fread(obj, stringsAsFactors = F,
data.table = F)
object <- object %>% tibble::column_to_rownames(colnames(object)[1]) %>%
as.matrix() %>% Matrix::Matrix(sparse=T)
return(object)
}
#### AnnData ####
if((endsWith(tolower(obj), suffix=".h5ad")) | tolower(filetype)=="h5ad"){
messager("+ AnnData format (.h5ad) detected. Importing as AnnData object...",v=verbose)
#### anndata method
# object <- anndata::read_h5ad(filename = obj)
#### sceasy method
# object <- sceasy::convertFormat(obj, from="anndata", to="sce")
#### Seurat method
object <- Seurat::ReadH5AD(obj, ...)
return(object)
}
#### H5Seurat ####
if((endsWith(tolower(obj), suffix=".h5seurat")) | tolower(filetype)=="h5seurat"){
messager("+ h5Seurat format (.h5Seurat) detected. Importing as Seurat object...",v=verbose)
object <- SeuratDisk::LoadH5Seurat(file = obj)
return(object)
}
#### Loom ####
if((endsWith(tolower(obj), suffix=".loom")) | tolower(filetype)=="loom"){
messager("+ Loom format (.loom) detected. Importing as SingleCellLoomExperiment object...",v=verbose)
#### anndata method
# anndata::read_loom(filename=obj, validate=F, ...) ### Difficulties identifying right loompy location
#### loomR method
## skip.validate must =F, or else you won't be able to extract the matrix
# object <- loomR::connect(filename=obj, skip.validate = F)
#### sceasy method
rhdf5::h5disableFileLocking() ## Causes error otherwise
object <- sceasy::convertFormat(obj, from="loom", to="sce")
# outFile = gsub(".loom",".sce.rds",obj))
return(object)
}
#### HDF5Array SummarizedExperiment/SingleCellExperiment ####
if(dir.exists(obj) | tolower(filetype) %in% c("HDF5Array","SummarizedExperiment","SingleCellExperiment") ){
if(file.exists(file.path(obj,"assays.h5")) & file.exists(file.path(obj,"se.rds")) ){
messager("+ HDF5Array format (.h5) detected. Importing as SingleCellExperiment object...",v=verbose)
object <- HDF5Array::loadHDF5SummarizedExperiment(obj, ...)
return(object)
}
}
} else {
messager("+ Returning object directly...",v=verbose)
return(obj)
}
}
sce <- ingest_data(obj="~/Desktop/pbmc_small.loom")
sce
devtools::document()
library(EWCE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
homologene::taxData
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict
dict <- c(dict,
"human"=9606,
"mouse"=10090,
"fly"=7227)
dict
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
species="poop"
warning("+ Species '",species,"' not found in taxa dict.\n",
"All available species:\n",
names(dict))
data.frame(names(dict))
warning("+ Species '",species,"' not found in taxa dict.\n",
"All available species:\n",
data.frame(species=names(dict)))
ata.frame(species=names(dict))
data.frame(species=names(dict))
data.frame(species=names(dict))
data.frame(species=names(dict))
message(data.frame(species=names(dict)) )
print(data.frame(species=names(dict)) )
warning("+ Species '",species,"' not found in taxa dict.\n",
"All available species:\n")
print(data.frame(species=names(dict)) )
warning("+ Species '",species,"' not found in taxa dict.\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
warning("+ Species '",species,"' not found in taxa dict.",
"Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
}
return(dict[species])
}
taxaID_dict(species = "ms\")
taxaID_dict(species = "ms")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
warning("+ Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
}
return(dict[species])
}
taxaID_dict("sef")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
message("+ Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
}
return(dict[species])
}
taxaID_dict("rge")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
message("::WARNING:: Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
}
return(dict[species])
}
taxaID_dict("Erge")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
message("::WARNING:: Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
species <- "mouse"
}
return(dict[species])
}
taxaID_dict("rger")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
## Add some common names for ease of use
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!species %in% names(dict)){
message("::WARNING:: Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
species <- "mouse"
}
return(dict[species])
}
taxaID_dict()
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
## Add some common names for ease of use
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!any(species %in% names(dict))){
message("::WARNING:: Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
species <- "mouse"
}
return(dict[species])
}
taxaID_dict()
species=c("human","mouse","fly")
missing_species <- species[!species %in% names(dict)]
missing_species
species
names(dict)
species[!species %in% names(dict)]
species[,!species %in% names(dict)]
class(names(dict))
missing_species <- species[!(species %in% names(dict))]
missing_species
species
species=c("human","mouse","fly","blarb")
missing_species <- species[!(species %in% names(dict))]
message("::WARNING:: Species '",species,"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
message("::WARNING:: Species '",paste(missing_species,collapse=", "),
"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
taxaID_dict <- function(species=c("human","mouse","fly")){
dict <- setNames(homologene::taxData$tax_id,
homologene::taxData$name_txt)
## Add some common names for ease of use
dict <- c(dict,
"human"=9606,
"chimp"=9598,
"monkey"=9544,
"macaque"=9544,
"mouse"=10090,
"rat"=10116,
"zebrafish"=7955,
"fly"=7227,
"worm"=6239)
if(!any(species %in% names(dict))){
missing_species <- species[!(species %in% names(dict))]
message("::WARNING:: Species '",paste(missing_species,collapse=", "),
"' not found in taxa dict.\n",
"+ Defaulting to 'mouse'\n\n",
"+ All available species:\n")
print(data.frame(species=names(dict)) )
species <- "mouse"
}
return(dict[species])
}
taxaID_dict()
